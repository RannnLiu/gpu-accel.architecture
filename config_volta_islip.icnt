use_map = 0;
//use_map = 1;
flit_size = 40; 

// currently we do not use this, see subnets below
network_count = 2;

// Topology
//topology = fly;
//k = 88;
//k = 8;
//n = 2;
//k = 9;
//n = 2;
//num_mcs = 10;
//num_mcs = 8;
topology = mesh;
//k = 8;
//n = 2;
//num_mcs = 48;
k = 11;
n = 2;
num_mcs = 11;
// Routing
//routing_function = dest_tag;
routing_function = dor;


// Flow control

num_vcs     = 1;
vc_buf_size = 256;
input_buffer_size = 256;
ejection_buffer_size = 256;
boundary_buffer_size = 256;

wait_for_tail_credit = 0;

// Router architecture
vc_allocator = islip;
sw_allocator = islip;
//vc_allocator = separable_input_first;
//sw_allocator = separable_input_first;
alloc_iters  = 1;

credit_delay   = 0;
routing_delay  = 0;
vc_alloc_delay = 1;
sw_alloc_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 2.0;

// Traffic, GPGPU-Sim does not use this

traffic                = uniform;
packet_size ={{1,2,3,4},{10,20}};
packet_size_rate={{1,1,1,1},{2,1}};

// Simulation - Don't change

sim_type       = gpgpusim;
//sim_type = latency;
injection_rate = 0.1;

subnets = 2;

// Always use read and write no matter following line
//use_read_write = 1;


read_request_subnet = 0;
read_reply_subnet = 1;
write_request_subnet = 0;
write_reply_subnet = 1;

read_request_begin_vc = 0;
read_request_end_vc = 0;
write_request_begin_vc = 0;
write_request_end_vc = 0;
read_reply_begin_vc = 0;
read_reply_end_vc = 0;
write_reply_begin_vc = 0;
write_reply_end_vc = 0;

